{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class UserAuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (this.authService.isAuthenticated && this.authService.userType === 'user') {\n      return true;\n    } else {\n      this.router.navigate(['userlogin']);\n      return false;\n    }\n  }\n}\nUserAuthGuard.ɵfac = function UserAuthGuard_Factory(t) {\n  return new (t || UserAuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nUserAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserAuthGuard,\n  factory: UserAuthGuard.ɵfac,\n  providedIn: 'root'\n});\nexport class RestaurantAuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (this.authService.isAuthenticated && this.authService.userType === 'restaurant') {\n      return true;\n    } else {\n      this.router.navigate(['restaurantlogin']);\n      return false;\n    }\n  }\n}\nRestaurantAuthGuard.ɵfac = function RestaurantAuthGuard_Factory(t) {\n  return new (t || RestaurantAuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nRestaurantAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestaurantAuthGuard,\n  factory: RestaurantAuthGuard.ɵfac,\n  providedIn: 'root'\n});\nexport class AdminAuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (this.authService.isAuthenticated && this.authService.userType === 'admin') {\n      return true;\n    } else {\n      this.router.navigate(['adminlogin']);\n      return false;\n    }\n  }\n}\nAdminAuthGuard.ɵfac = function AdminAuthGuard_Factory(t) {\n  return new (t || AdminAuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAdminAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminAuthGuard,\n  factory: AdminAuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserAuthGuard","constructor","authService","router","canActivate","isAuthenticated","userType","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn","RestaurantAuthGuard","AdminAuthGuard"],"sources":["/home/coder/project/workspace/foodapp_frontend/src/app/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated && this.authService.userType === 'user') {\n      return true;\n    } else {\n      this.router.navigate(['userlogin']);\n      return false;\n    }\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantAuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated && this.authService.userType === 'restaurant') {\n      return true;\n    } else {\n      this.router.navigate(['restaurantlogin']);\n      return false;\n    }\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminAuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated && this.authService.userType === 'admin') {\n      return true;\n    } else {\n      this.router.navigate(['adminlogin']);\n      return false;\n    }\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,aAAa;EACxBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACF,WAAW,CAACG,eAAe,IAAI,IAAI,CAACH,WAAW,CAACI,QAAQ,KAAK,MAAM,EAAE;MAC5E,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACnC,OAAO,KAAK;;EAEhB;;AAVWP,aAAa,C;mBAAbA,aAAa,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAbb,aAAa,C;SAAbA,aAAa;EAAAc,OAAA,EAAbd,aAAa,CAAAe,IAAA;EAAAC,UAAA,EAFZ;AAAM;AAkBpB,OAAM,MAAOC,mBAAmB;EAC9BhB,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACF,WAAW,CAACG,eAAe,IAAI,IAAI,CAACH,WAAW,CAACI,QAAQ,KAAK,YAAY,EAAE;MAClF,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;MACzC,OAAO,KAAK;;EAEhB;;AAVWU,mBAAmB,C;mBAAnBA,mBAAmB,EAAAT,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAnBI,mBAAmB,C;SAAnBA,mBAAmB;EAAAH,OAAA,EAAnBG,mBAAmB,CAAAF,IAAA;EAAAC,UAAA,EAFlB;AAAM;AAkBpB,OAAM,MAAOE,cAAc;EACzBjB,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACF,WAAW,CAACG,eAAe,IAAI,IAAI,CAACH,WAAW,CAACI,QAAQ,KAAK,OAAO,EAAE;MAC7E,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACpC,OAAO,KAAK;;EAEhB;;AAVWW,cAAc,C;mBAAdA,cAAc,EAAAV,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAdK,cAAc,C;SAAdA,cAAc;EAAAJ,OAAA,EAAdI,cAAc,CAAAH,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}